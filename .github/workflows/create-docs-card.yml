name: Create Docs Project Card

on:
  workflow_call:
    inputs:
      issue_title:
        required: true
        type: string
      issue_url:
        required: true
        type: string
      repo:
        required: true
        type: string
      project_title:
        required: true
        type: string
      field_name:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true

jobs:
  create-docs-card:
    runs-on: ubuntu-latest
    steps:
      - name: Create project card for documentation (Projects v2)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ISSUE_TITLE: ${{ inputs.issue_title }}
          ISSUE_URL: ${{ inputs.issue_url }}
          REPO: ${{ inputs.repo }}
          PROJECT_TITLE: ${{ inputs.project_title }}
          FIELD_NAME: ${{ inputs.field_name }}
        run: |
          set -e

          OWNER=$(echo "$REPO" | cut -d/ -f1)
          REPO_NAME=$(echo "$REPO" | cut -d/ -f2)

          echo "Fetching Project ID..."
          PROJECT_ID=$(gh api graphql -F owner="$OWNER" -F name="$REPO_NAME" -F projectTitle="$PROJECT_TITLE" -f query='
            query($owner: String!, $name: String!, $projectTitle: String!) {
              repository(owner: $owner, name: $name) {
                projectsV2(first: 10, query: $projectTitle) {
                  nodes {
                    id
                    title
                  }
                }
              }
            }
          ' | jq -r '.data.repository.projectsV2.nodes[] | select(.title == env.PROJECT_TITLE) | .id')

          if [ -z "$PROJECT_ID" ]; then
            echo "Project not found: $PROJECT_TITLE"
            exit 1
          fi

          echo "Project ID found: $PROJECT_ID"

          echo "Fetching field ID for the column..."
          FIELD_ID=$(gh api graphql -f query='
            query ($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            }
          ' -F projectId="$PROJECT_ID" | jq -r '.data.node.fields.nodes[] | select(.name==env.FIELD_NAME) | .id')

          if [ -z "$FIELD_ID" ]; then
            echo "Field (column) not found: $FIELD_NAME"
            exit 1
          fi

          echo "Field ID found: $FIELD_ID"

          echo "Creating a new project card..."

          CREATE_CARD_MUTATION='
            mutation ($projectId: ID!, $title: String!) {
              addProjectV2ItemByDraftIssue(input: {
                projectId: $projectId,
                title: $title
              }) {
                item {
                  id
                }
              }
            }
          '

          CONTENT="**${ISSUE_TITLE}** - [Original Issue](${ISSUE_URL})"

          RESULT=$(gh api graphql -f query="$CREATE_CARD_MUTATION" -F projectId="$PROJECT_ID" -F title="$CONTENT")

          ITEM_ID=$(echo "$RESULT" | jq -r '.data.addProjectV2ItemByDraftIssue.item.id')

          if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
            echo "Failed to create project card."
            echo "$RESULT"
            exit 1
          fi

          echo "Project card created successfully with ID: $ITEM_ID"
